-# app/views/admin/abilities/_form.html.haml
= form_with model: [:admin, @ability], local: true do |f|
  - # Ensure we have at least one nested record to work with
  - f.object.ability_permissions.build if f.object.ability_permissions.empty?
  - f.object.ability_effects.build     if f.object.ability_effects.empty?

  - if @ability.errors.any?
    #error_explanation
      %h2= "#{pluralize(@ability.errors.count, 'error')} prohibited this ability from being saved:"
      %ul
        - @ability.errors.full_messages.each do |msg|
          %li= msg

  .field
    = f.label :name
    = f.text_field :name, class: "border rounded p-2 w-full"

  .field
    = f.label :description
    = f.text_area :description, class: "border rounded p-2 w-full"

  .field
    = f.label :power
    = f.number_field :power, class: "border rounded p-2 w-full"

  .field
    = f.label :cost
    = f.number_field :cost, class: "border rounded p-2 w-full"

  .field
    = f.label :cooldown
    = f.number_field :cooldown, class: "border rounded p-2 w-full"

  .field
    = f.label :damage
    = f.number_field :damage, class: "border rounded p-2 w-full"

  .field
    = f.label :element_type
    = f.text_field :element_type, class: "border rounded p-2 w-full"

  %h3 Permissions
  - f.object.ability_permissions.each do |perm_obj|
    = f.fields_for :ability_permissions, perm_obj do |perm|
      .nested-permission.mb-4.border.p-2.rounded
        = perm.hidden_field :id
        .field.mb-2
          = perm.label :permitted_type, "Type of Permission"
          = perm.select :permitted_type,
                       options_for_select([['PetType','PetType'], ['Pet','Pet']], perm.object.permitted_type),
                       {}, class: "border rounded p-1 w-full"
        .field.mb-2
          = perm.label :permitted_id, "Permitted Item"
          - case perm.object.permitted_type
          - when 'PetType'
            - options = PetType.pluck(:name, :id)
          - when 'Pet'
            - options = Pet.pluck(:name, :id)
          - else
            - options = []
          = perm.select :permitted_id,
                       options,
                       { include_blank: true },
                       class: "border rounded p-1 w-full"
        .field
          = perm.check_box :_destroy
          = perm.label :_destroy, "Remove this permission"

  %h3 Effects
  - f.object.ability_effects.each do |ae_obj|
    = f.fields_for :ability_effects, ae_obj do |ae|
      .nested-effect.mb-4.border.p-2.rounded
        = ae.hidden_field :id
        .field.mb-2
          = ae.label :effect_id, "Effect"
          = ae.collection_select :effect_id, Effect.all, :id, :name,
                                 { include_blank: true },
                                 class: "border rounded p-1 w-full"
        .field.mb-2
          = ae.label :magnitude
          = ae.number_field :magnitude, class: "border rounded p-1 w-full"
        .field.mb-2
          = ae.label :duration
          = ae.number_field :duration, class: "border rounded p-1 w-full"
        .field
          = ae.check_box :_destroy
          = ae.label :_destroy, "Remove this effect"

  .actions.mt-4
    = f.submit "Save Ability", class: "px-4 py-2 bg-blue-600 text-white rounded"
